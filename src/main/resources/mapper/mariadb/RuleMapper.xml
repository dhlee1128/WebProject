<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.become.atum.webportal.dao.RuleMapper">

  <cache />

  <!-- 그룹 메뉴 조회 -->

  <select id="selectDefRuleSourceList" parameterType="string" resultType="DefRuleSource">
    SELECT /** selectDefRuleSourceList */
    a.PROJECTID
    ,IFNULL(a.MESSAGEGROUP,"") MESSAGEGROUP
    ,a.DETAILMESSAGEID
    , (select distinct b.rulename from RULE_SOURCEDEFINITION b where a.projectid = b.PROJECTID and a.detailmessageid= b.DETAILMESSAGEID) as rulename 
    FROM PRJ_MESSAGEBODYDEFINITION a
    WHERE a.PROJECTID = #{projectId}
    ORDER BY a.MESSAGEGROUP, RULENAME
  </select>


  <select id="selectDefRuleGroupList" parameterType="string" resultType="DefRuleSource">
    SELECT DISTINCTIFNULL(MESSAGEGROUP,"") MESSAGEGROUP
    FROM RULE_SOURCEDEFINITION WHERE PROJECTID = #{projectId} 
    ORDER BY MESSAGEGROUP
  </select>
  
  <!--WBS 그룹 기준으로 조회-->
  <select id="selectDefRuleSourceListWithWbs" parameterType="DefRuleSource" resultType="DefRuleSource">
  SELECT /** selectDefRuleSourceList For Group */
	  a.PROJECTID
	  ,IFNULL(a.MESSAGEGROUP,"") MESSAGEGROUP
    ,a.DETAILMESSAGEID
	  ,b.RULEID
    ,b.RULENAME
    ,b.VERSION
    ,b.MESSAGEID
    ,b.STATUS
    ,b.DESCRIPTION
    ,(SELECT CODEID FROM PRJ_FUNCTIONERRORCODE C WHERE C.PROJECTID = #{projectId} AND  C.FUNCTIONID = b.RULEID ) AS ERRORCODEID
    ,b.BUILDLOCK
    ,IFNULL(b.GROUP1, "") GROUP1
    ,b.ICONIMAGE
    ,b.ICONNAME
    FROM PRJ_MESSAGEBODYDEFINITION a
    LEFT JOIN  RULE_SOURCEDEFINITION b
    ON a.PROJECTID = b.PROJECTID  and a.DETAILMESSAGEID = b.DETAILMESSAGEID 
    WHERE a.PROJECTID = #{projectId}
    <choose>
      <when test='group1 != null and group1 == "ALL"'>
      ORDER BY b.GROUP1 , b.RULEID
      </when>
      <otherwise>
        AND b.GROUP1 = #{group1} 
         ORDER BY b.GROUP1
      </otherwise>
    </choose>
  </select>

    <!--WBS 그룹 기준으로 조회 ruleName에 해당하는 노드 있는지 없는지 판단.-->
  <select id="selectDefRuleSourceListWithWbs2" parameterType="DefRuleSource" resultType="DefRuleSource">
  SELECT /** selectDefRuleSourceList For Child*/
	  a.PROJECTID
    ,a.MESSAGEGROUP
    ,a.DETAILMESSAGEID
    ,b.RULEID
    ,b.RULENAME
    ,b.VERSION
    ,b.MESSAGEID
    ,b.STATUS
    ,b.DESCRIPTION
    ,(SELECT CODEID FROM PRJ_FUNCTIONERRORCODE C WHERE C.PROJECTID = #{projectId} AND  C.FUNCTIONID = b.RULEID ) AS ERRORCODEID
    ,b.BUILDLOCK
    ,b.GROUP1
    ,b.ICONIMAGE
    ,b.ICONNAME
    , case when b.rulename = #{ruleName} then 1 else 0 end accentFlag
    FROM PRJ_MESSAGEBODYDEFINITION a
    LEFT JOIN  RULE_SOURCEDEFINITION b
    ON a.PROJECTID = b.PROJECTID  and a.DETAILMESSAGEID = b.DETAILMESSAGEID 
    WHERE a.PROJECTID = #{projectId}
    <choose>
      <when test = 'ruleName != null'>
      AND b.GROUP1 = #{group1}
         ORDER BY b.GROUP1
      </when>
      <otherwise>
        AND b.GROUP1 = #{group1} 
         ORDER BY b.GROUP1
      </otherwise>
    </choose>
  </select>

  <select id="selectBasicBlockList" parameterType="BasicBlock" resultType="BasicBlock">
      SELECT /** Rule.selectBasicBlockList */ * FROM RULE_BASICBLOCK 
      WHERE 1=1
      AND PROJECTID = #{projectId}
      AND RULEID = #{ruleId}
    <if test='version != null and version != ""'>
      AND VERSION = #{version} 
    </if>
      ORDER BY CAST(SEQNUM AS INTEGER) ,BLOCKGROUP
      
  </select>

  <select id="getErrorMessage" parameterType="HashMap" resultType="String">
      SELECT /** getErrorMessage */
      <choose>
        <when test="ERRORMESSAGE_LANG_TYPE == null or ERRORMESSAGE_LANG_TYPE.equals('ERRORMESSAGE_LANG_TYPE')">
            ERRORMESSAGE_LANG1
        </when>
        <otherwise>
         ${ERRORMESSAGE_LANG_TYPE}
        </otherwise>
      </choose>             
      FROM PRJ_ERRORMESSAGE
      WHERE CATEGORY  = 'ErrorMessage' 
      AND MESSAGEID = #{MESSAGEID}
      AND PROJECTID = #{PROJECTID}
  </select>

  <insert id="insertErrorCodeDef" parameterType="HashMap">
    <selectKey keyProperty="ERRORCODE" resultType="String" order="BEFORE">
        SELECT CONCAT('E' , (SELECT CODEID FROM PRJ_SYSTEMERRORCODE WHERE SYSTEMID = 'Rule') , #{CODEID}  , #{SUBFUNCTIONID} , A.MAXDATA) AS ERRORCODE
      FROM ( 
      SELECT  LPAD(CAST(SUBSTR(ERRORCODE,-3) AS INTEGER)+10,3,'0')AS MAXDATA 
        FROM PRJ_ERRORCODEDEFINITION
        WHERE ERRORLEVEL = 'Error'
          AND FUNCTIONID = #{FUNCTIONID}
          AND SUBFUNCTIONID = #{SUBFUNCTIONID}
          AND PROJECTID = #{PROJECTID}
          UNION ALL 
        SELECT '010' 
          FROM DUAL
        ORDER BY 1 desc
          )A
          LIMIT 1
      <!-- WHERE ROWNO = 1 -->
    </selectKey>
    INSERT INTO PRJ_ERRORCODEDEFINITION(
      PROJECTID
      ,ERRORCODE
      ,FUNCTIONID
      ,SUBFUNCTIONID
      ,ERRORLEVEL
      ,MESSAGEID
      ,VARIABLENUMBER
      ,VARIABLES
      ,REPLACEMENTVALUES
      ,DESCRIPTION
      )VALUES(
      #{PROJECTID}
      ,#{ERRORCODE}
      ,#{FUNCTIONID}
      ,#{SUBFUNCTIONID}
      ,#{ERRORLEVEL}
      ,#{MESSAGEID}
      ,#{VARIABLENUMBER}
      ,#{VARIABLES}
      ,#{REPLACEMENTVALUES}
      <if test="ERRORDEF_DESCRIPTION == null">
      , ''
      </if>
      <if test="ERRORDEF_DESCRIPTION != null">
      ,#{ERRORDEF_DESCRIPTION}
      </if>      
      )
  </insert>

  <delete id="deleteAllBasicBlock" parameterType="BasicBlock">
    DELETE FROM RULE_BASICBLOCK 
    WHERE PROJECTID = #{projectId}  
    AND RULEID = #{ruleId}
  </delete>

  <delete id="deleteAllBasicItem" parameterType="BasicItem">
    DELETE FROM RULE_BASICITEM 
    WHERE PROJECTID = #{projectId}  
    AND RULEID = #{ruleId}
  </delete>

  <delete id="deleteAllBasicLine" parameterType="BasicLine">
    DELETE FROM RULE_BASICLINE 
    WHERE PROJECTID = #{projectId}  
    AND RULEID = #{ruleId}
  </delete>

  <delete id="deleteAllBizItem" parameterType="BasicItem">
    DELETE FROM RULE_BIZLOGICITEM 
    WHERE PROJECTID = #{projectId}  
    AND RULEID = #{ruleId}
    AND VERSION = #{version}
  </delete>

  <delete id="deleteAllBizLine" parameterType="BasicLine">
    DELETE FROM RULE_BIZLOGICLINE 
    WHERE PROJECTID = #{projectId}  
    AND RULEID = #{ruleId}
    AND VERSION = #{version}
  </delete>

  <!--Basic Block-->
  <update id="insertBasicBlock" parameterType="java.util.List">    
    INSERT INTO RULE_BASICBLOCK
     (
        PROJECTID
        ,RULEID 
        ,VERSION
        ,CURRENTACTIVE
        ,BLOCKGROUP
        ,BLOCKID
        ,SEQNUM
        ,PSEUDOCODE1
        ,ICONNAME
        ,ICONTEXT1
        ,ICONIMAGE
        ,DESCRIPTION1
    ) VALUES
      <foreach item="item" index="index" collection="list" separator=" , ">
      (   
        #{item.PROJECTID}
        ,#{item.RULEID}
        ,'0.0.1'
        ,'ACTIVE'
        ,#{item.BLOCKGROUP}
        ,#{item.BLOCKID}
        ,#{item.SEQNUM}
        ,#{item.PSEUDOCODE1}
        ,#{item.ICONNAME}
        ,#{item.ICONTEXT1}
        ,#{item.ICONIMAGE}
        ,#{item.DESCRIPTION1}
        )
    </foreach>
  </update>

  <!--Basic Item-->
  <update id="insertBasicItem" parameterType="java.util.List">    
     INSERT INTO RULE_BASICITEM
     (
       PROJECTID
      ,RULEID
      ,BLOCKID
      ,ITEMID
      ,SEQNUM
      ,PSEUDOCODE3
      ,ICONNAME
      ,ICONTEXT3
      ,ICONIMAGE
      ,DESCRIPTION3
      ,PSEUDOCODE1
      ,PSEUDOCODE2
      ,ICONTEXT1
      ,ICONTEXT2
      ,DESCRIPTION1
      ,DESCRIPTION2
      ,VERSION
    ) VALUES
    <foreach collection="list" item="item" index="index" separator=",">
    (
      #{item.PROJECTID}
      ,#{item.RULEID}
      ,#{item.BLOCKID}
      ,#{item.ITEMID}
      ,#{item.SEQNUM}
      ,#{item.PSEUDOCODE3}
      ,#{item.ICONNAME}
      ,#{item.ICONTEXT3}
      ,#{item.ICONIMAGE}
      ,#{item.DESCRIPTION3}
      ,#{item.PSEUDOCODE1}
      ,#{item.PSEUDOCODE2}
      ,#{item.ICONTEXT1}
      ,#{item.ICONTEXT2}
      ,#{item.DESCRIPTION1}
      ,#{item.DESCRIPTION2} 
      ,#{item.VERSION}
      )
    </foreach>
  </update>

  <!--Basic Line-->
  <update id="insertBasicLine" parameterType="HashMap">
    <!-- <foreach collection="list" item="item" index="index" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"> -->
     INSERT INTO RULE_BASICLINE
     (
        PROJECTID
        ,RULEID
        ,BLOCKID
        ,ITEMID
        ,LINEAKEYID
        ,PSEUDOCODE3
        ,CATEGORY
        ,SOURCECODE
        ,VARIABLENUMBER
        ,VARIABLES
        ,REPLACEMENTVALUES
        ,DESCRIPTION3
        ,PSEUDOCODE1
        ,PSEUDOCODE2
        ,DESCRIPTION1
        ,DESCRIPTION2 
        ,SEQNUM
        ,VERSION
        ,ERRORCODE
        ,ERRORMESSAGEID
    ) VALUES
      (
      #{PROJECTID}
      ,#{RULEID}
      ,#{BLOCKID}
      ,#{ITEMID}
      <choose>
        <when test="ITEMID == 'SetMandantoryParameterMain' || ITEMID == 'SetInputParameterStart' ||  ITEMID =='SetInputParameterEnd'">
          ,CAST(#{LINEAKEYID} AS INTEGER)
        </when>  
        <otherwise> 
          ,#{LINEAKEYID}
        </otherwise>
      </choose>
      ,#{PSEUDOCODE3}
      ,#{CATEGORY}
      ,#{SOURCECODE}
      <choose>
        <when test="VARIABLENUMBER == '' || VARIABLENUMBER == null">
          , 0
        </when>  
        <otherwise> 
          ,#{VARIABLENUMBER}
        </otherwise>
      </choose>
      ,#{VARIABLES}
      ,#{REPLACEMENTVALUES}
      ,#{DESCRIPTION3}
      ,#{PSEUDOCODE1}
      ,#{PSEUDOCODE2}
      ,#{DESCRIPTION1}
      ,#{DESCRIPTION2} 
      ,#{SEQNUM}
      ,#{VERSION}
      ,#{ERRORCODE}        
      ,#{ERRORMESSAGEID}   
    )
     <!-- <foreach item="item" index="index" collection="list" separator=" , ">
      (
      #{item.PROJECTID}
      ,#{item.RULEID}
      ,#{item.BLOCKID}
      ,#{item.ITEMID}
      <choose>
        <when test="item.ITEMID == 'SetMandantoryParameterMain' || item.ITEMID == 'SetInputParameterStart' ||  item.ITEMID =='SetInputParameterEnd'">
          ,CAST(#{item.LINEAKEYID} AS INTEGER) +#{index}
        </when>  
        <otherwise> 
          ,#{item.LINEAKEYID}
        </otherwise>
      </choose>
      ,#{item.PSEUDOCODE}
      ,#{item.CATEGORY}
      ,#{item.SOURCECODE}
      <choose>
        <when test="item.VARIABLENUMBER == '' || item.VARIABLENUMBER == null">
          ,''
        </when>  
        <otherwise> 
          ,#{item.VARIABLENUMBER}
        </otherwise>
      </choose>
      ,#{item.VARIABLES}
      ,#{item.REPLACEMENTVALUES}
      ,#{item.DESCRIPTION}
      ,#{item.PSEUDOCODE1}
      ,#{item.PSEUDOCODE2}
      ,#{item.DESCRIPTION1}
      ,#{item.DESCRIPTION2} 
      ,#{item.SEQNUM}
      ,#{item.VERSION}
      ,#{item.ERRORCODE}        
      ,#{item.ERRORMESSAGEID}   
    )
    </foreach> -->
  </update>

  <select id="selectBasicDataCount" parameterType="BasicItem" resultType="int">
    SELECT COUNT(*) from RULE_BASICBLOCK A
    LEFT OUTER JOIN RULE_BASICITEM B ON A.PROJECTID = B.PROJECTID AND A.BLOCKID = B.BLOCKID AND A.RULEID =B.RULEID 
    LEFT OUTER JOIN RULE_BASICLINE C ON  B.PROJECTID = C.PROJECTID  AND B.BLOCKID = C.BLOCKID AND B.ITEMID = C.ITEMID AND B.RULEID =C.RULEID 
    WHERE A.PROJECTID = #{projectId} AND A.RULEID = #{ruleId}
  </select>

  <select id="selectMessageIds" parameterType="MessageBodyDefinition" resultType="java.util.HashMap">  
    SELECT DETAILMESSAGEID AS MESSAGEID ,  CHAR_LENGTH(SERVICENAME) AS LEN
    FROM PRJ_MESSAGEBODYDEFINITION 
    WHERE 1=1
      <!-- <if test='list!=null and list.size!=0' >
        AND DETAILMESSAGEID NOT IN 
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">   
        #{item.detailMessageId}
        </foreach>
        <foreach item="item" index="index" collection="list" >   
        <if test="index ==0">
          AND PROJECTID = #{item.projectId}
        </if>
        </foreach>
      </if> -->
      AND DETAILMESSAGEID = #{detailMessageId}
      AND PROJECTID = #{projectId}
      <!-- AND MESSAGEID != 'QueryRule' -->
      <!-- AND PROJECTID = #{projectId} -->
    ORDER BY DETAILMESSAGEID
  </select>

  <select id="defRuleMessageId" parameterType="DefRuleSource" resultType="DefRuleSource">
    SELECT PROJECTID,MESSAGEID,SERVICENAME,DETAILMESSAGEID 
    FROM RULE_SOURCEDEFINITION WHERE PROJECTID = #{projectId}
    <if test='ruleId != null and ruleId != ""'>
        AND RULEID = #{ruleId}
      </if>
      AND DETAILMESSAGEID IS NOT NULL
  </select>

  <!--DEF 추가 작업 진행 중-->
  <insert id="insertRuleDefinition" parameterType="HashMap">
    INSERT INTO PRJ_RULEDEFINITION(
      PROJECTID
      ,RULENAME
      ,RULEID
      ,ISSYSTEM
      ,CURRENTVERSION      
    ) VALUES(
      #{projectId}
      ,#{messageBodyDef.ruleName}
      ,#{ruleId}
      ,''
      ,'0.0.1'
    )
  
  </insert>
  <insert id="insertDefRuleSource" parameterType="HashMap">
    INSERT INTO RULE_SOURCEDEFINITION(
      PROJECTID
      ,RULEID
      ,VERSION
      ,MESSAGEID
      ,STATUS
      <!-- ,ERRORCODEID -->
      ,BUILDLOCK
      ,GROUP1
      ,ICONNAME
      ,ICONIMAGE
      ,ISCURVERSION
      ,SERVICENAME
      ,DETAILMESSAGEID
      ,RULENAME
      ,CREATEUSER
      ,UPDATEUSER
      ,CREATEDATE
      ,UPDATEDATE
      ,REVISIONFLAG
    ) VALUES(
      #{projectId}
      ,#{ruleId}
      ,#{version}
      ,#{messageBodyDef.messageId}
      ,#{status}
      <!-- ,#{funcErrorCodeRule.CODEID} -->
      ,0
      ,#{groupId}
      ,LOWER(#{groupId})
      ,CONCAT(LOWER(#{groupId}) , '.png')
      ,'Y'
      ,#{messageBodyDef.serviceName}
      ,#{messageBodyDef.detailMessageId}
      ,#{messageBodyDef.ruleName}
      ,#{userId}
      ,#{userId}
      ,NOW()
      ,NOW() 
      ,'N')
  </insert>

  <update id="insertRevisionHistoryData" parameterType="HashMap">
    MERGE INTO REVISIONHISTORY
    USING DUAL ON (PROJECTID= #{projectId} AND RULEID = #{ruleId} AND VERSION = #{version} AND  UPDATEDATE = NOW())
    WHEN MATCHED THEN        
      UPDATE SET UPDATEUSER = #{userId}
      ,DESCRIPTION = #{description}
    WHEN NOT MATCHED THEN
    INSERT (
      PROJECTID
      ,RULEID
      ,VERSION
      ,UPDATEUSER
      ,UPDATEDATE
      ,DESCRIPTION
    )VALUES(
      #{projectId}
    , #{ruleId}
    , #{version}
    , #{userId}
    , NOW()
    , #{description}
    )
  </update>

  <select id="getBlockList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
     SELECT /** Rule.getBlockList */  
      PROJECTID as PROJECTID
      ,BLOCKGROUP AS BLOCKGROUP
      ,BLOCKID AS BLOCKID
      ,PSEUDOCODE3 AS PSEUDOCODE3
      ,ICONNAME AS ICONNAME
      ,ICONTEXT3 AS ICONTEXT3
      ,ICONIMAGE AS ICONIMAGE
      ,DESCRIPTION3 AS DESCRIPTION3
      ,PSEUDOCODE1 AS PSEUDOCODE1
      ,PSEUDOCODE2 AS PSEUDOCODE2
      ,ICONTEXT1 AS ICONTEXT1
      ,ICONTEXT2 AS ICONTEXT2
      ,DESCRIPTION1 AS DESCRIPTION1
      ,DESCRIPTION2 AS DESCRIPTION2
      ,SEQNUM AS SEQNUM
      , #{version} AS VERSION
      <if test="ruleId != null and ruleId != '' ">
        ,#{ruleId} AS RULEID
      </if>
      <if test="ruleId == null or ruleId == '' ">
        ,#{RULEID} AS RULEID
      </if>
      <if test="projectId != null and projectId != '' ">
        ,#{projectId} AS PROJECTID
      </if>
      <if test="PROJECTID != null and PROJECTID != '' ">
        ,#{PROJECTID} AS PROJECTID
      </if>
    FROM RULE_BASICBLOCKTEMPLATE 
    WHERE PROJECTID = #{projectId}
    ORDER BY CAST(SEQNUM AS INTEGER)
  </select>

  <select id="getItemList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
     SELECT /** rule.getItemList */
      PROJECTID as PROJECTID
      ,I.BLOCKID AS BLOCKID
      ,ITEMID AS ITEMID
      ,PSEUDOCODE3 AS PSEUDOCODE3
      ,ICONNAME AS ICONNAME
      ,ICONTEXT3 AS ICONTEXT3
      ,ICONIMAGE AS ICONIMAGE
      ,DESCRIPTION3 AS DESCRIPTION3
      ,PSEUDOCODE1 AS PSEUDOCODE1
      ,PSEUDOCODE2 AS PSEUDOCODE2
      ,ICONTEXT1 AS ICONTEXT1
      ,ICONTEXT2 AS ICONTEXT2
      ,DESCRIPTION1 AS DESCRIPTION1
      ,DESCRIPTION2 AS DESCRIPTION2
      ,I.SEQNUM AS SEQNUM
      , #{version} AS VERSION
      <if test="ruleId != null and ruleId != '' ">
        ,#{ruleId} AS RULEID
      </if>
      <if test="RULEID != null and RULEID != '' ">
        ,#{RULEID} AS RULEID
      </if>
      <!-- <if test="projectId != null and projectId != '' "> -->
        ,#{projectId} AS PROJECTID
      <!-- </if> -->
      <!-- <if test="PROJECTID != null and PROJECTID != '' ">
        ,#{PROJECTID} AS PROJECTID
      </if> -->
    FROM RULE_BASICITEMTEMPLATE I
    LEFT JOIN(
      SELECT BLOCKID , SEQNUM 
      FROM RULE_BASICBLOCKTEMPLATE 
      WHERE 1=1
        <if test="projectId != null and projectId != '' ">
          AND PROJECTID = #{projectId}
        </if>
        <if test="PROJECTID != null and PROJECTID != '' ">
          AND PROJECTID = #{PROJECTID}
        </if>
      ORDER BY CAST(SEQNUM AS INTEGER)
    ) B ON B.BLOCKID = I.BLOCKID
    WHERE 1=1
    <!-- <if test="projectId != null and projectId != '' "> -->
       AND PROJECTID = #{projectId}
    <!-- </if> -->
    <!-- <if test="PROJECTID != null and PROJECTID != '' ">
        AND PROJECTID = #{PROJECTID}
    </if> -->
   ORDER BY CAST(B.SEQNUM AS INTEGER) DESC ,CAST(I.SEQNUM AS INTEGER) DESC
  </select>

  <select id="getLineList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
     SELECT /** rule.getLineList */ PROJECTID  
      , BLOCKID  
      , ITEMID 
      , LINEAKEYID
      , CATEGORY 
      , SOURCECODE 
      , PSEUDOCODE3 
      , VARIABLENUMBER  
      , VARIABLES 
      , REPLACEMENTVALUES
      , DESCRIPTION3 
      , PSEUDOCODE1 
      , PSEUDOCODE2 
      , DESCRIPTION1 
      , DESCRIPTION2 
      , SEQNUM 
      ,ERRORMESSAGEID
      ,ERRORCODE
      ,'0.0.1' as VERSION
      <if test="ruleId != null and ruleId != '' ">
          ,#{ruleId} AS RULEID
      </if>
      <if test="RULEID != null and RULEID != '' ">
          ,#{RULEID} AS RULEID
      </if>
      <if test="projectId != null and projectId != '' ">
        ,#{projectId} AS PROJECTID
      </if>
      <if test="PROJECTID != null and PROJECTID != '' ">
        ,#{PROJECTID} AS PROJECTID
      </if>
    FROM RULE_BASICLINETEMPLATE 
    WHERE 1=1 
    <!-- <if test="projectId != null and projectId != '' ">  -->
    AND PROJECTID = #{projectId} 
    <!-- </if> -->
    <!-- <if test="PROJECTID != null and PROJECTID != '' "> AND PROJECTID = #{PROJECTID} </if>     -->
      AND NOT(BLOCKID = 'REQUIREDCHECK' AND
        ITEMID IN ('SetInputParameterStart','SetMandantoryParameterMain','SetInputParameterEnd') 
        OR BLOCKID = 'EXECUTELOGIC' AND ITEMID IN ('DefDbClassMainSet','DefVariableSet')
        <!-- OR BLOCKID = 'REPLYMESSAGE' AND ITEMID IN ('SetReplyLst') -->
        )
    ORDER BY BLOCKID, ITEMID, CAST(SEQNUM AS INTEGER)
  </select>

   <select id="getBasicLineList" parameterType="HashMap" resultType="HashMap">
    SELECT PROJECTID
      ,RULEID
      ,VERSION
      ,BLOCKID
      ,ITEMID
      ,LINEAKEYID
      ,SEQNUM
      ,ISMODIFIABLE
      ,PSEUDOCODE3
      ,CATEGORY
      ,SOURCECODE
      ,VARIABLENUMBER
      ,VARIABLES
      ,REPLACEMENTVALUES
      ,ERRORCODE
      ,ERRORMESSAGEID
      ,DESCRIPTION3
      ,PSEUDOCODE1
      ,PSEUDOCODE2
      ,DESCRIPTION1
      ,DESCRIPTION2
    FROM RULE_BASICLINE
    WHERE PROJECTID = #{projectId}
    AND RULEID = #{ruleId}
  </select>

  <select id="getChagneItemLineTemplate" parameterType="java.util.HashMap" resultType="java.util.HashMap">
    SELECT /* getChagneItemLineTemplate*/
      PROJECTID
      ,BLOCKID
      ,ITEMID
      ,LINEAKEYID
      ,CATEGORY
        ,SOURCECODE
      ,PSEUDOCODE3
      ,VARIABLENUMBER
      ,VARIABLES
      ,REPLACEMENTVALUES
      ,DESCRIPTION3
      ,PSEUDOCODE1
      ,PSEUDOCODE2
      ,DESCRIPTION1
      ,DESCRIPTION2
      ,SEQNUM
    FROM RULE_BASICLINETEMPLATE WHERE PROJECTID = #{PROJECTID} 
    AND BLOCKID = #{BLOCKID}  
    AND ITEMID = #{ITEMID}
    ORDER BY CAST(SEQNUM AS INTEGER)
  </select>

   <select id="getDefrulesourceData" parameterType="HashMap" resultType="DefRuleSource">
    SELECT /** getDefrulesourceData */
        PROJECTID
      ,RULEID
      ,VERSION
      ,GROUP1
      ,GROUP2
      ,GROUP3
      ,MESSAGEID
      ,SERVICENAME
      ,DETAILMESSAGEID
      ,RULENAME
      <!-- ,ERRORCODEID -->
      ,STATUS
      ,BUILDLOCK
      ,ICONNAME
      ,ICONTEXT
      ,ICONIMAGE
      ,ISCURVERSION
      ,DESCRIPTION
      ,CREATEDATE
      ,CREATEUSER
      ,UPDATEDATE
      ,UPDATEUSER
    FROM RULE_SOURCEDEFINITION
    WHERE PROJECTID = #{projectId} 
      AND RULEID = #{ruleId} 
      <choose>
        <when test='VERSION != null and VERSION !=""'>
          AND VERSION = #{VERSION}
        </when>
        <otherwise>
          AND VERSION = '0.0.1'
        </otherwise>
      </choose>
  </select>

  <select id="getMessageBodyDefList" parameterType="HashMap" resultType="HashMap">
    SELECT /** rule.getMessageBodyDefList */ 
      MESSAGEID 
      ,SERVICENAME
      ,DETAILMESSAGEID
      ,PARENTPARAMETER
      ,PARAMETER
      ,PARAMETERTYPE
      ,LEVEL
      ,DESCRIPTION
      ,POSITION
      ,DATATYPE
      ,DATASIZE
      ,MANDATORY
      ,MESSAGETYPE
    FROM PRJ_MESSAGEBODYATTRDEFINITION B
    WHERE 1=1 AND DETAILMESSAGEID = #{detailMessageId}
    AND PROJECTID = #{projectId}
    ORDER BY CASE WHEN MANDATORY = 'Y' THEN 1 ELSE 2 END, CAST(POSITION AS unsigned)
  </select>

  <update id="updateBasicLineList" parameterType="java.util.List">
    <foreach item="item" index="index" collection="list" separator=";">
      UPDATE RULE_BASICLINE SET 
      SOURCECODE = #{item.SOURCECODE} 
        <choose>
          <when test="item.VARIABLENUMBER == '' || item.VARIABLENUMBER == null">, VARIABLENUMBER = null</when>
          <otherwise>        , VARIABLENUMBER = #{item.VARIABLENUMBER}        </otherwise>
        </choose>      
      , VARIABLES = #{item.VARIABLES} 
      , REPLACEMENTVALUES = #{item.REPLACEMENTVALUES}
      <if test="item.ERRORCODE != null">
        ,ERRORCODE = #{item.ERRORCODE}
      </if>
      WHERE PROJECTID = #{item.PROJECTID} 
        AND RULEID = #{item.RULEID}
        AND VERSION = #{item.VERSION}
        AND BLOCKID = #{item.BLOCKID}
        AND ITEMID = #{item.ITEMID}
        AND SEQNUM = #{item.SEQNUM}
    </foreach>
  </update>

  <select id="getReqCheckBasicTemplateList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
    SELECT /** rule.getReqCheckBasicTemplateList */
       PROJECTID  
      , BLOCKID  
      , ITEMID 
      , <![CDATA[ REGEXP_REPLACE(LINEAKEYID, '[^[:digit:]]','') ]]> AS LINEAKEYID
      , CATEGORY 
      , SOURCECODE 
      , PSEUDOCODE3 
      , VARIABLENUMBER  
      , VARIABLES 
      , REPLACEMENTVALUES
      , DESCRIPTION3 
      , PSEUDOCODE1 
      , PSEUDOCODE2 
      , DESCRIPTION1 
      , DESCRIPTION2 
      , SEQNUM 
      ,ERRORMESSAGEID
      ,ERRORCODE
      ,'0.0.1' as VERSION
      ,#{ruleId} AS RULEID
      ,#{projectId} AS PROJECTID      
    FROM RULE_BASICLINETEMPLATE 
    WHERE 1=1 AND PROJECTID = #{projectId} 
     <choose>
      <when test="addType == 'REPLYMESSAGE' ">
          AND BLOCKID = 'REPLYMESSAGE' AND ITEMID IN ('SetReplyLst')
      </when>
      <otherwise>
          AND (BLOCKID = 'REQUIREDCHECK' AND ITEMID IN ('SetInputParameterStart','SetMandantoryParameterMain','SetInputParameterEnd'))
      </otherwise>
     </choose>
    ORDER BY LINEAKEYID 
  </select>

  <select id="getMessageBodyData" parameterType="java.util.HashMap" resultType="MessageBodyDefinition">
      SELECT /** rule.getMessageBodyData */
        MESSAGEID
        ,SERVICENAME
        ,DETAILMESSAGEID
        ,RULENAME
        ,DESCRIPTION
        ,ISSYSTEM
        ,MESSAGEGROUP
        ,PROJECTID
      FROM PRJ_MESSAGEBODYDEFINITION
      WHERE 1=1
      <choose>
        <when test="detailMessageId != null">
          AND DETAILMESSAGEID = #{detailMessageId}
        </when>
        <otherwise>
          AND RULENAME = #{ruleId}
        </otherwise>
      </choose>      
      AND PROJECTID = #{projectId}
  </select>

  <insert id="insertFunctionError" parameterType="HashMap">
      <selectKey keyProperty="funcErrorCodeRule" resultType="HashMap" order="AFTER">
        SELECT /* insertFunctionError.selectKey */ * FROM PRJ_FUNCTIONERRORCODE
        WHERE 
        <!-- AND FUNCTIONID = #{messageBodyDef.detailMessageId} -->
        FUNCTIONID = #{ruleId}
        AND PROJECTID = #{projectId} 
      </selectKey>
        INSERT INTO PRJ_FUNCTIONERRORCODE
          ( FUNCTIONID
            ,CODEID
            ,CODESIZE
            ,DESCRIPTION
            ,PROJECTID
        )VALUES(
                  <!-- ,#{messageBodyDef.detailMessageId} -->
                  #{ruleId}
                  <!-- ,(SELECT LPAD(NVL(MAX(CODEID),0)+1,3,0)FROM PRJ_FUNCTIONERRORCODE LEN WHERE SYSTEMID = 'Rule' AND PROJECTID = #{projectId}) -->
                  ,CASE WHEN (
                    SELECT CODEID FROM PRJ_FUNCTIONERRORCODE LEN33
                     WHERE PROJECTID = #{projectId}
                      <!-- AND FUNCTIONID = #{messageBodyDef.detailMessageId}) IS NULL -->
                      AND FUNCTIONID = #{ruleId}) IS NULL
                  THEN (SELECT LPAD(NVL(MAX(CODEID),0)+1,3,0)FROM PRJ_FUNCTIONERRORCODE LEN44 WHERE PROJECTID = #{projectId} ) 
                  ELSE (
                    SELECT CODEID
                    FROM PRJ_FUNCTIONERRORCODE LEN55 
                    WHERE PROJECTID = #{projectId}
                      AND FUNCTIONID = #{ruleId}) END
                  ,'3'
                  ,#{messageBodyDef.detailMessageId}
                  ,#{projectId}
              )
              ON DUPLICATE KEY
        UPDATE DESCRIPTION =#{messageBodyDef.detailMessageId}
  </insert>
  
  <update id="insertRuleInfoGroup" parameterType="HashMap">
    MERGE INTO LCDP_RULEINFO
      USING DUAL ON (
        PROJECTID= #{projectId} 
        AND RULEID = #{groupId}
        AND RULETYPE = 'GR'
      )
      WHEN MATCHED THEN
        UPDATE SET CREATEUSER = CREATEUSER
      WHEN NOT MATCHED THEN
        INSERT (
          PROJECTID
          ,ITEMID
          ,RULETYPE
          ,RULEID
          ,VERSION
          ,LOCKSTATUS
          ,LOCKUSER
          ,WORKSTATUS
          ,POSITION
          ,GROUPFLAG
          ,CREATEDATE
          ,CREATEUSER
        )VALUES(
          #{projectId}
          <!-- ,(SELECT CONCAT('R', (MAX(TO_NUMBER(NVL(SUBSTR(ITEMID,2),0)))+1) FROM LCDP_RULEINFO )) -->
          ,(SELECT CONCAT('R', (MAX(CAST(NVL(SUBSTR(ITEMID,2),0)  AS INTEGER ))+1) FROM LCDP_RULEINFO ))
          ,'GR'
          ,#{groupId}
          ,'0.0.1'
          ,'U'
          ,#{userId}
          ,'C'
          ,1
          ,'N'
          ,NOW()
          ,#{userId}
        )
  </update>

  <select id="getFuncErrorCodeRule" parameterType="java.util.HashMap" resultType="java.util.HashMap">
      SELECT /** getFuncErrorCodeRule */
        CODEID 
      FROM
      PRJ_FUNCTIONERRORCODE
      WHERE 1=1
      AND PROJECTID = #{PROJECTID}
    <if test="DETAILMESSAGEID == null || DETAILMESSAGEID =='' ">
      AND FUNCTIONID = (SELECT DETAILMESSAGEID FROM PRJ_MESSAGEBODYDEFINITION WHERE RULENAME = #{RULEID} AND PROJECTID = #{PROJECTID})
    </if>
    <if test="DETAILMESSAGEID != null and DETAILMESSAGEID !='' ">
        AND FUNCTIONID = #{DETAILMESSAGEID}        
    </if>
  </select>

  <update id="updateDefRuleSource" parameterType="HashMap">
    UPDATE RULE_SOURCEDEFINITION SET
      MESSAGEID = #{messageId}
      ,SERVICENAME = #{serviceName} 
      ,DETAILMESSAGEID = #{detailMessageId} 
      ,RULENAME = #{ruleName} 
    WHERE PROJECTID = #{projectId}
      AND RULEID = #{ruleId}
      <if test="version != null and version != ''">
        AND VERSION = #{version}
      </if>
  </update>

  <update id="updateBasicBlockSeqNum" parameterType="java.util.List">
    <foreach item="item" index="index" collection="list" separator=";">
      UPDATE RULE_BASICBLOCKTEMPLATE  SET SEQNUM= CAST(#{item.seqNum} AS INTEGER) WHERE PROJECTID = #{item.projectId} AND BLOCKID = #{item.blockId}
    </foreach>
  </update>
  
  <update id="updateBasicItemSeqNum" parameterType="HashMap">
      UPDATE RULE_BASICITEMTEMPLATE  SET SEQNUM= CAST(#{seqNum} AS INTEGER) WHERE PROJECTID = #{projectId} AND BLOCKID = #{blockId} AND ITEMID = #{itemId}
  </update>
  
  <update id="updateBasicLineSeqNum" parameterType="HashMap">
      UPDATE RULE_BASICLINETEMPLATE 
       SET SEQNUM= CAST(#{SEQNUM} AS INTEGER) 
       WHERE PROJECTID = #{PROJECTID} 
       AND BLOCKID = #{BLOCKID} 
       AND ITEMID = #{ITEMID}
       AND LINEAKEYID = #{LINEAKEYID}
  </update>

  <select id="geJstBasicList" parameterType="HashMap" resultType="HashMap">
     SELECT /** geJstBasicList */ A.BLOCKID
     , A.ITEMID
     , A.ICONTEXT1
     ,A.BLOCK_PSEUDOCODE
     , A.ITEM_PSEUDOCODE
     , A.SOURCECODE
     , A.BLOCK_SEQ
     , A.ITEM_SEQ 
     , A.LINE_SEQ 
     , A.ISMODIFIABLE
     , A.LINE_PSEUDOCODE
     FROM  ( <include refid="basicBizAllData" />) A
  </select>

  <sql id="basicBizAllData">
      SELECT /** basicBizAllData */ 
        * 
      FROM(
        SELECT 
          @ROWNUM := @ROWNUM +1 AS ROWNUM
          , A.* 
        FROM (
          SELECT  A.BLOCKID
            , A.ITEMID
            , A.ICONTEXT1
            , A.BLOCK_PSEUDOCODE
            , A.ITEM_PSEUDOCODE
            , A.SOURCECODE
            , A.BLOCK_SEQ
            , A.ITEM_SEQ 
            , A.LINE_SEQ 
            , A.ISMODIFIABLE
            , A.LINE_PSEUDOCODE
          FROM  (  
            SELECT A.BLOCKID, A.ITEMID, A.SOURCECODE, C.SEQNUM AS BLOCK_SEQ ,NVL(B.SEQNUM,2)AS ITEM_SEQ ,A.SEQNUM AS LINE_SEQ 
              , C.PSEUDOCODE1 AS BLOCK_PSEUDOCODE , B.PSEUDOCODE1 AS ITEM_PSEUDOCODE ,B.ICONTEXT1
              , A.ISMODIFIABLE ,A.PSEUDOCODE1 AS LINE_PSEUDOCODE
            FROM  (SELECT PROJECTID,RULEID,VERSION,BLOCKID,ITEMID,SEQNUM,ISMODIFIABLE,PSEUDOCODE3	
                  ,CATEGORY,SOURCECODE,VARIABLENUMBER,VARIABLES,REPLACEMENTVALUES,ERRORCODE
                  ,ERRORMESSAGEID,DESCRIPTION3,PSEUDOCODE1,PSEUDOCODE2,DESCRIPTION1,DESCRIPTION2
                  FROM RULE_BASICLINE
                  WHERE NOT ITEMID IN ('SetInputParameterStart','SetMandantoryParameterMain','SetInputParameterEnd','RequiredCheckEnd')
                   <!-- ,'DEFDBCLASSMAINSET' -->
                ) A
            LEFT OUTER JOIN RULE_BASICITEM B ON A.PROJECTID = B.PROJECTID AND A.RULEID = B.RULEID AND A.BLOCKID = B.BLOCKID AND A.ITEMID = B.ITEMID
            LEFT OUTER JOIN RULE_BASICBLOCK C ON A.PROJECTID = C.PROJECTID AND A.RULEID = C.RULEID AND A.BLOCKID = C.BLOCKID
            WHERE A.PROJECTID = #{projectId} AND A.RULEID = #{ruleId}
          ) A
          ,(SELECT @ROWNUM := 0) TMP
          ORDER BY A.BLOCK_SEQ , A.ITEM_SEQ , A.LINE_SEQ
        )A 
        UNION ALL
        SELECT @ROWNUM := @ROWNUM +1 AS ROWNUM
          , A.* 
        FROM (
          SELECT /** geJstBasicList */ A.BLOCKID
            , A.ITEMID
            , CASE WHEN A.ITEMID = 'RequiredCheckEnd' THEN A.ICONTEXT1 ELSE 'Message Parameter를 설정' END AS ICONTEXT
            , A.BLOCK_PSEUDOCODE
            , A.ITEM_PSEUDOCODE
            , A.SOURCECODE
            , A.BLOCK_SEQ
            , A.ITEM_SEQ 
            , A.LINE_SEQ 
            , A.ISMODIFIABLE
            , A.LINE_PSEUDOCODE
          FROM  (  
            SELECT A.BLOCKID
            , CASE WHEN A.ITEMID = 'RequiredCheckEnd' THEN 'RequiredCheckEnd' ELSE 'SetMandantoryParameterMain' END AS ITEMID
            , A.SOURCECODE, C.SEQNUM AS BLOCK_SEQ ,NVL(B.SEQNUM,2)AS ITEM_SEQ ,A.SEQNUM AS LINE_SEQ <!-- ,E.SEQNUM AS BIZITEM_SEQ  -->
            , C.PSEUDOCODE1 AS BLOCK_PSEUDOCODE , B.PSEUDOCODE1 AS ITEM_PSEUDOCODE 
            , B.ICONTEXT1
            , A.ISMODIFIABLE 
            , A.PSEUDOCODE1 AS LINE_PSEUDOCODE
            FROM  (SELECT PROJECTID,RULEID,VERSION,BLOCKID,ITEMID
                  ,CASE WHEN ITEMID = 'RequiredCheckEnd' 
                  THEN CASE WHEN SEQNUM = 1 THEN (SELECT MAX(SEQNUM)+1 FROM RULE_BASICLINE WHERE BLOCKID = 'REQUIREDCHECK') 
                             WHEN SEQNUM = 2 THEN (SELECT MAX(SEQNUM)+2 FROM RULE_BASICLINE WHERE BLOCKID = 'REQUIREDCHECK')
                             ELSE (SELECT MAX(SEQNUM)+3 FROM RULE_BASICLINE WHERE BLOCKID = 'REQUIREDCHECK')
                             END 
                  ELSE SEQNUM 
                  END AS SEQNUM
                  ,ISMODIFIABLE,PSEUDOCODE3	
                  ,CATEGORY,SOURCECODE,VARIABLENUMBER,VARIABLES,REPLACEMENTVALUES,ERRORCODE
                  ,ERRORMESSAGEID,DESCRIPTION3,PSEUDOCODE1,PSEUDOCODE2,DESCRIPTION1,DESCRIPTION2
                  FROM RULE_BASICLINE
                  WHERE ITEMID IN ('SetInputParameterStart','SetMandantoryParameterMain','SetInputParameterEnd','RequiredCheckEnd')
                ) A
            LEFT OUTER JOIN RULE_BASICITEM B ON A.PROJECTID = B.PROJECTID AND A.RULEID = B.RULEID AND A.BLOCKID = B.BLOCKID AND A.ITEMID = B.ITEMID
            LEFT OUTER JOIN RULE_BASICBLOCK C ON A.PROJECTID = C.PROJECTID AND A.RULEID = C.RULEID AND A.BLOCKID = C.BLOCKID
            WHERE A.PROJECTID = #{projectId} AND A.RULEID = #{ruleId}
          ) A
          ,(SELECT @ROWNUM := 0) TMP 
          ORDER BY A.LINE_SEQ
        )A 
      )A
      ORDER BY A.BLOCK_SEQ,ROWNUM 
  </sql>

  <select id="functionErrorCodeData" parameterType="HashMap" resultType="HashMap">
    SELECT FUNCTIONID
      ,CODEID
      ,CODESIZE
      ,DESCRIPTION
      ,PROJECTID
    FROM PRJ_FUNCTIONERRORCODE 
    WHERE FUNCTIONID = (SELECT DETAILMESSAGEID FROM PRJ_MESSAGEBODYDEFINITION WHERE RULENAME = #{ruleId} AND PROJECTID =  #{projectId})
     AND PROJECTID = #{projectId}
    ORDER BY CODEID
  </select>

  <select id="getDefRuleInfo" parameterType="Item" resultType="DefRuleSource">
    SELECT * 
    FROM RULE_SOURCEDEFINITION
    WHERE PROJECTID = #{projectId}
    AND RULEID = #{ruleId}
    <if test = "version != null and version != ''">
      AND VERSION = #{version}
    </if>
  </select>

  <delete id="deleteFunctionErrorcodeData" parameterType="DefRuleSource">
    DELETE FROM PRJ_FUNCTIONERRORCODE
    <!-- WHERE FUNCTIONID = #{detailMessageId} -->
    WHERE FUNCTIONID = #{ruleId}
    AND PROJECTID = #{projectId}
    <!-- AND 0 = (SELECT COUNT(*) FROM RULE_SOURCEDEFINITION WHERE PROJECTID = #{projectId} AND RULENAME = #{ruleName}); -->
  </delete>

  <delete id="deleteRuleDefinition" parameterType="DefRuleSource">
  DELETE FROM PRJ_RULEDEFINITION
  WHERE RULENAME = #{ruleName}
    AND RULEID = #{ruleId}
    AND PROJECTID = #{projectId}
  </delete>
  <delete id="deleteErrorcodeData" parameterType="DefRuleSource">
    DELETE FROM PRJ_ERRORCODEDEFINITION
    <!-- WHERE FUNCTIONID = #{detailMessageId} AND PROJECTID = #{projectId} -->
    WHERE FUNCTIONID = #{ruleId} AND PROJECTID = #{projectId}
  </delete>

  <delete id="deleteDefSource" parameterType="DefRuleSource">
    DELETE FROM RULE_SOURCEDEFINITION WHERE RULEID =#{ruleId} AND PROJECTID = #{projectId}
  </delete>
  
  <update id="saveLanguageOption" parameterType="HashMap">
    UPDATE KHPI_PROJECT 
    SET ERRORCODELANGUAGE = #{errorLang}
    WHERE PROJECTID = #{projectId}
  </update>

  <update id="updateSeqNum" parameterType="BasicBlockTemplate"> 
     UPDATE RULE_BASICBLOCKTEMPLATE SET SEQNUM = SEQNUM-1 WHERE PROJECTID =#{projectId} AND <![CDATA[ #{seqNum} < seqNum ]]>
  </update>
  
  <select id="getFunctionErrorCodeRuleList" parameterType="HashMap" resultType="HashMap">
    SELECT /** getFunctionErrorCodeRuleList */ 
      FUNCTIONID
      ,CODEID
      ,CODESIZE
      ,DESCRIPTION
    FROM PRJ_FUNCTIONERRORCODE 
    WHERE 
    <choose>
      <when test="detailMessageId == null and ruleId != null">
        FUNCTIONID = (SELECT DETAILMESSAGEID FROM PRJ_MESSAGEBODYDEFINITION WHERE RULENAME = #{ruleId} )
      </when>
      <otherwise>
        FUNCTIONID = #{detailMessageId}
      </otherwise>
    </choose>    
    ORDER BY CODEID
  </select>

  <select id="selectLineCount" parameterType="BasicLineTemplate" resultType="Integer">
    SELECT COUNT(*) FROM RULE_BASICLINETEMPLATE WHERE ITEMID=#{itemId}
  </select>

  <update id="updateSeqNumItem" parameterType="BasicItemTemplate">
    UPDATE RULE_BASICITEMTEMPLATE SET SEQNUM = SEQNUM-1 WHERE BLOCKID =#{blockId} AND PROJECTID =#{projectId} AND <![CDATA[  #{seqNum} < seqNum ]]>
  </update>
  
  <update id="updateSeqNumLine" parameterType="BasicLineTemplate"> 
    UPDATE RULE_BASICLINETEMPLATE SET SEQNUM = SEQNUM-1 WHERE ITEMID =#{itemId} AND PROJECTID =#{projectId} AND <![CDATA[  #{seqNum} < seqNum ]]>
  </update>

  <select id="selectBizlogicLineList" parameterType="BizLogicLine" resultType="BizLogicLine">
    SELECT /** selectBizlogicLineList */ 
      A.PROJECTID 
      ,A.RULEID 
      ,A.VERSION
      ,A.BLOCKID
      ,B.ITEMID AS TOP_ITEMID
      ,A.ITEMID
      ,A.SEQNUM
      ,A.ISMODIFIABLE
      ,NVL(A.PSEUDOCODE1,'') AS PSEUDOCODE
      ,A.CATEGORY,NVL(A.SOURCECODE,'') as SOURCECODE
      ,A.INDENTATION
      ,A.VARIABLENUMBER
      ,A.VARIABLES
      ,A.REPLACEMENTVALUES
      ,A.ERRORCODE
      ,A.ERRORMESSAGEID
      ,A.VALUESDATA
      ,A.DESCRIPTION3
      ,A.PSEUDOCODE2
      ,A.PSEUDOCODE3
      ,A.DESCRIPTION
      ,A.DESCRIPTION1
      ,A.DESCRIPTION2
      ,B.ITEMTYPE      
    FROM RULE_BIZLOGICLINE A 
    LEFT OUTER JOIN RULE_BIZLOGICITEM B ON A.PROJECTID = B.PROJECTID AND A.RULEID = B.RULEID AND A.VERSION = B.VERSION 
    AND A.BLOCKID = B.BLOCKID AND A.ITEMID = B.ITEMID 
      WHERE A.PROJECTID = #{projectId}
      AND A.RULEID = #{ruleId}
      AND A.VERSION = #{version}
      <if test="superItemId != null and superItemId != '' ">
      <choose>
        <when test="superItemId != null and superItemId == 'None' ">
          AND B.ITEMID = #{itemId}
        </when>
        <otherwise>
          AND B.SUPERITEMID = #{itemId}
        </otherwise>
      </choose>
      </if>
      ORDER BY B.SEQNUM,A.SEQNUM
  </select>

  <select id="selectgetMessageBodydef" parameterType="Item" resultType="HashMap">
    SELECT
      A.SERVICENAME,
      A.DETAILMESSAGEID,
      A.RULENAME,
      A.MESSAGEID,
      B.MESSAGEGROUP 
    FROM
      RULE_SOURCEDEFINITION A
    LEFT JOIN PRJ_MESSAGEBODYDEFINITION B
    ON A.PROJECTID=B.PROJECTID AND A.MESSAGEID =B.MESSAGEID AND A.DETAILMESSAGEID =B.DETAILMESSAGEID AND A.SERVICENAME=B.SERVICENAME AND A.RULENAME=B.RULENAME
    WHERE A.PROJECTID = #{projectId} AND A.RULEID = #{ruleId} AND A.VERSION = #{version} 
  </select>
  
  <delete id="deleteErrorcodeData_bizlogic" parameterType="BizLogicLine">
    DELETE FROM PRJ_ERRORCODEDEFINITION 
    WHERE ERRORCODE IN (
      SELECT DISTINCT ERRORCODE FROM RULE_BIZLOGICLINE 
      WHERE PROJECTID = #{projectId} 
      AND RULEID = #{ruleId}
      AND VERSION = #{version} 
      AND ERRORCODE IS NOT NULL 
      AND NOT ERRORCODE = ''
      <!-- AND ITEMID = #{itemId} -->
      <if test="itemId != null and itemId != '' ">
        AND ITEMID IN (
        SELECT ITEMID FROM RULE_BIZLOGICITEM 
          WHERE PROJECTID = #{projectId}
            AND (ITEMID =  #{itemId} 
              OR SUPERITEMID IN
                (      
	                SELECT ITEMID 
	                FROM RULE_BIZLOGICITEM 
			          WHERE PROJECTID = #{projectId}
			            AND (ITEMID =  #{itemId} 
			              OR SUPERITEMID IN
			                (SELECT ITEMID FROM RULE_BIZLOGICITEM WHERE PROJECTID =#{projectId}
			                	    AND RULEID = #{ruleId}
								    AND VERSION =#{version}
								    AND BLOCKID = #{blockId}
			                    AND (ITEMID =  #{itemId} 
			                    OR SUPERITEMID IN (SELECT ITEMID FROM RULE_BIZLOGICITEM
                           WHERE PROJECTID = #{projectId}
			                  	    AND RULEID = #{ruleId}
								    AND VERSION = #{version}
								    AND BLOCKID = #{blockId}
			                    AND (ITEMID =  #{itemId} OR SUPERITEMID =  #{itemId}))
			                    )
			                  )
			              )
                  )
              )
		    )
      </if>
    ) 
  </delete>
  
  <delete id="deleteBizLogicLineData" parameterType="BizLogicItem">
        DELETE FROM RULE_BIZLOGICLINE 
        WHERE PROJECTID =  #{projectId}
        AND RULEID = #{ruleId}
        AND VERSION = #{version}
        AND BLOCKID = #{blockId}
      <if test="itemId != null and itemId != '' ">
        AND ITEMID IN (
        SELECT ITEMID FROM RULE_BIZLOGICITEM 
          WHERE PROJECTID = #{projectId}
            AND (ITEMID =  #{itemId} 
              OR SUPERITEMID IN
                (      
	                SELECT ITEMID 
	                FROM RULE_BIZLOGICITEM 
			          WHERE PROJECTID = #{projectId}
			            AND (ITEMID =  #{itemId} 
			              OR SUPERITEMID IN
			                (SELECT ITEMID FROM RULE_BIZLOGICITEM WHERE PROJECTID =#{projectId}
			                	    AND RULEID = #{ruleId}
								    AND VERSION =#{version}
								    AND BLOCKID = #{blockId}
			                    AND (ITEMID =  #{itemId} 
			                    OR SUPERITEMID IN (SELECT ITEMID FROM RULE_BIZLOGICITEM
                           WHERE PROJECTID = #{projectId}
			                  	    AND RULEID = #{ruleId}
								    AND VERSION = #{version}
								    AND BLOCKID = #{blockId}
			                    AND (ITEMID =  #{itemId} OR SUPERITEMID =  #{itemId}))
			                    )
			                  )
			              )
                  )
              )
		)
      </if>
  </delete>
  
  <delete id="deleteBizLogicItemData" parameterType="BizLogicLine">
    DELETE FROM RULE_BIZLOGICITEM WHERE PROJECTID = #{projectId}
    AND RULEID = #{ruleId}
    AND VERSION = #{version}
    AND BLOCKID = #{blockId}
    <if test="itemId != null and itemId != '' ">
      AND (ITEMID = #{itemId} 
      OR SUPERITEMID IN(   SELECT ITEMID FROM RULE_BIZLOGICITEM 
        WHERE PROJECTID = #{projectId}
          AND (ITEMID =  #{itemId} 
            OR SUPERITEMID IN
              (SELECT ITEMID FROM RULE_BIZLOGICITEM WHERE PROJECTID = #{projectId}
                  AND RULEID = #{ruleId}
                  AND VERSION = #{version}
                  AND BLOCKID =#{blockId}
                  AND (ITEMID =  #{itemId} 
                  OR SUPERITEMID IN (SELECT ITEMID FROM RULE_BIZLOGICITEM WHERE PROJECTID = #{projectId}
                  AND RULEID = #{ruleId}
                  AND VERSION = #{version}
                  AND BLOCKID =#{blockId}
                  AND (ITEMID =  #{itemId} OR SUPERITEMID =  #{itemId}))
                  )
                )
          )
          )
      )
    </if>
  </delete>
  
  <delete id="deleteVariableInUseData" parameterType="BizLogicLine">
    DELETE FROM RULE_VARIABLEINUSE
    WHERE PROJECTID = #{projectId}
      AND RULEID = #{ruleId}
      AND VERSION = #{version}
      <if test="itemId != null and itemId != '' ">
        AND ITEMID IN (  SELECT ITEMID FROM RULE_BIZLOGICITEM WHERE SUPERITEMID IN 	
            ( SELECT ITEMID FROM RULE_BIZLOGICITEM WHERE PROJECTID =  #{projectId}
                AND RULEID = #{ruleId}
                AND VERSION = #{version}
                AND BLOCKID = #{blockId}
                AND (ITEMID =  #{itemId}
                OR SUPERITEMID IN (SELECT ITEMID FROM RULE_BIZLOGICITEM WHERE PROJECTID =  #{projectId}
                AND RULEID = #{ruleId}
                AND VERSION = #{version}
                AND BLOCKID = #{blockId}
                AND (ITEMID =  #{itemId}OR SUPERITEMID =  #{itemId}))
                )
              )
              OR ITEMID IN (				SELECT ITEMID FROM RULE_BIZLOGICITEM WHERE PROJECTID =  #{projectId}
                AND RULEID = #{ruleId}
                AND VERSION = #{version}
                AND BLOCKID = #{blockId}
                AND (ITEMID =  #{itemId}
                OR SUPERITEMID IN (SELECT ITEMID FROM RULE_BIZLOGICITEM WHERE PROJECTID =  #{projectId}
                AND RULEID = #{ruleId}
                AND VERSION = #{version}
                AND BLOCKID = #{blockId}
                AND (ITEMID =  #{itemId} OR SUPERITEMID =  #{itemId}))
                )
              )
          )
      </if>
  </delete>
  
  <delete id="deleteVariableDeclareData" parameterType="BizLogicLine">
    DELETE FROM RULE_VARIABLEDECLARE
    WHERE PROJECTID = #{projectId}
    AND RULEID = #{ruleId}
    AND VERSION = #{version}
    <if test="variableName != null and variableName != ''">
      AND VARIABLENAME = #{variableName} 
    </if>
    </delete>
  
  <select id="getErrorLangData" parameterType="java.lang.String" resultType="java.lang.String">
    SELECT CASE WHEN ERRORCODELANGUAGE IS NULL THEN '-1' WHEN ERRORCODELANGUAGE = '' THEN '-1' ELSE ERRORCODELANGUAGE END AS errorLang FROM KHPI_PROJECT WHERE PROJECTID = #{projectId} AND SYSTEMTYPE = '4A'
   <!-- SELECT CASE WHEN ERRORCODELANGUAGE = '0' THEN 'English' WHEN ERRORCODELANGUAGE = '1' THEN '한국어' WHEN ERRORCODELANGUAGE = '2' THEN 'Chinese' ELSE -1 end AS errorLang  FROM KHPI_PROJECT WHERE PROJECTID = #{projectId} -->
  </select>  

  <select id="getBizLineList" parameterType="HashMap" resultType="HashMap">
     SELECT  DISTINCT 
				A.PROJECTID			AS PROJECTID        
				,A.RULEID               AS RULEID           
				,A.VERSION              AS VERSION          
				,A.BLOCKID              AS BLOCKID          
				,A.ITEMID               AS ITEMID           
				,A.SEQNUM               AS SEQNUM           
				,A.ISMODIFIABLE         AS ISMODIFIABLE     
				,A.PSEUDOCODE3          AS PSEUDOCODE3       
				,A.CATEGORY             AS CATEGORY         
				,A.SOURCECODE           AS SOURCECODE       
				,A.INDENTATION          AS INDENTATION      
				,A.VARIABLENUMBER       AS VARIABLENUMBER   
				,A.VARIABLES            AS VARIABLES        
				,A.REPLACEMENTVALUES    AS REPLACEMENTVALUES
				,A.ERRORCODE            AS ERRORCODE        
				,A.ERRORMESSAGEID       AS ERRORMESSAGEID   
				,A.VALUESDATA           AS VALUESDATA       
				,A.DESCRIPTION3         AS DESCRIPTION3      
				,A.PSEUDOCODE1          AS PSEUDOCODE1      
				,A.PSEUDOCODE2          AS PSEUDOCODE2      
				,A.DESCRIPTION1         AS DESCRIPTION1     
				,A.DESCRIPTION2         AS DESCRIPTION2     
				FROM RULE_BIZLOGICLINE A
			LEFT OUTER JOIN RULE_BIZLOGICITEM B ON
				A.PROJECTID = B.PROJECTID
				AND A.RULEID = B.RULEID
				AND A.BLOCKID = B.BLOCKID
				AND A.ITEMID = B.ITEMID
			LEFT OUTER JOIN RULE_BASICBLOCK C ON
				A.PROJECTID = C.PROJECTID
				AND A.RULEID = C.RULEID
				AND C.BLOCKID = C.BLOCKID
			WHERE A.PROJECTID = #{projectId}
				AND A.RULEID = #{ruleId}
				<!-- AND A.VERSION = '0.0.1' -->
				AND A.VERSION = #{version}
			ORDER BY CAST(B.SEQNUM AS INTEGER) ,CAST( A.SEQNUM AS INTEGER)
  </select>

  <select id="selectBizlogicitemList" parameterType="BizLogicItem" resultType="BizLogicItem">
    SELECT PROJECTID
      ,RULEID,VERSION,BLOCKID,ITEMID,LEVEL,SUPERITEMID,SEQNUM,INDENTATION
      ,ITEMNAME,ITEMTYPE,CATEGORY,ISMODIFIABLE,TABLENAME,PSEUDOCODE3,ICONNAME
      ,ICONTEXT3,ICONIMAGE,DESCRIPTION3,PSEUDOCODE1,PSEUDOCODE2
      ,ICONTEXT1,ICONTEXT2,DESCRIPTION1,DESCRIPTION2
    FROM RULE_BIZLOGICITEM
    WHERE PROJECTID = #{projectId}
      AND RULEID = #{ruleId}
      AND LEVEL = 0
      <if test="itemId != null and itemId != '' ">
      AND ITEMID = #{itemId}
      </if>
    ORDER BY SEQNUM
  </select>

  <select id="selectBizItemCategoryList" parameterType="BizItemTemplate" resultType="BizItemTemplate">
    SELECT * FROM RULE_BIZITEMTEMPLATE
      WHERE PROJECTID = #{projectId}
      AND BLOCKID = #{blockId} 
      AND "LEVEL" = 0
    ORDER BY CATEGORY,ITEMNAME
  </select>

  <select id="selectBizItemMenuList" parameterType="HashMap" resultType="KhepriMenu">
    SELECT M.*     
    ,CASE WHEN MENUID = 'Else3' 
    THEN 'NonePopup' ELSE 'Popup' END  AS POPUPMENU
    ,M.FILENAME AS ICONIMAGE
    <!-- ,(SELECT ICONIMAGE FROM RULE_BIZITEMTEMPLATE rb 
      WHERE PROJECTID =  #{projectId}
            AND UPPER(rb.ITEMNAME) LIKE CONCAT(REGEXP_REPLACE(UPPER(M.CAPTION1),'[0-9]',''),'%') LIMIT 1) AS ICONIMAGE -->
    FROM KHPI_MENU M WHERE PROJECTID = #{projectId} AND SYSTEMTYPE = '4A' AND UIID = 'rule'
          AND MENUID in (
              SELECT MENUID 
              FROM KHPI_USERGROUPMENU 
              WHERE USERGROUPID = (SELECT USERGROUPID FROM KHPI_USERPROFILE ku WHERE PROJECTID = #{projectId} AND USERID = #{userId})
              UNION 
              SELECT MENUID 
              FROM KHPI_USERPROFILEMENU ku2 
              WHERE PROJECTID = #{projectId} AND USERID = #{userId}
              )
          and MENUTYPE = 'F'
      UNION 
      SELECT PROJECTID
        , '4A'
        ,'ReadyUDF'
        ,ITEMNAME
        ,'F'
        ,'3'
        ,'READYUDF2'
        , ITEMNAME
        , ITEMNAME
        , SEQNUM
        , DESCRIPTION1 
        ,'','',''
        ,'NonePopup' as POPUPMENU
        ,'UDF.svg' AS ICONIMAGE
     FROM RULE_UDFBIZITEMTEMPLATE ru 
     WHERE PROJECTID =  #{projectId}
     AND SUPERITEMID = 'Top'
    ORDER BY MENULEVEL,`POSITION`
  </select>

  <select id="getBizLogicLine3" parameterType="HashMap" resultType="HashMap">
      SELECT  PROJECTID
        ,RULEID
        ,VERSION
        ,BLOCKID
        ,ITEMID
        ,SEQNUM
        ,ISMODIFIABLE
        ,IFNULL(PSEUDOCODE1,'') AS PSEUDOCODE
        ,CATEGORY
        ,SOURCECODE
        ,INDENTATION
        ,VARIABLENUMBER
        ,VARIABLES
        ,REPLACEMENTVALUES
        ,ERRORCODE
        ,ERRORMESSAGEID
        ,VALUESDATA
        ,DESCRIPTION3
        ,PSEUDOCODE2
        ,PSEUDOCODE3
        ,DESCRIPTION1
        ,DESCRIPTION2
    FROM RULE_BIZLOGICLINE  
    WHERE PROJECTID = #{projectId}
      AND RULEID = #{ruleId}
      <choose>
        <when test="itemId != null and itemId != '' ">
          AND ITEMID = #{itemId}
        </when>
        <otherwise>
          AND BLOCKID = #{blockId}
        </otherwise>
      </choose>
      AND VERSION = #{version}
      ORDER BY CAST(SEQNUM AS INTEGER)
  </select>

  <select id="getMessageList" parameterType="HashMap" resultType="HashMap">
    SELECT MESSAGEID /** bizItem.getMessageList */
      ,SERVICENAME
      ,DETAILMESSAGEID
      ,PARENTPARAMETER
      ,PARAMETER
      ,PARAMETERTYPE
      ,LEVEL
      ,DESCRIPTION
      ,POSITION
      ,DATATYPE
      ,DATASIZE
      ,MANDATORY
      ,MESSAGETYPE
    FROM PRJ_MESSAGEBODYATTRDEFINITION B
    WHERE DETAILMESSAGEID IN (SELECT DETAILMESSAGEID FROM RULE_SOURCEDEFINITION rs  WHERE PROJECTID  = #{projectId} AND RULEID = #{ruleId} AND VERSION = #{version})    
    <!-- WHERE DETAILMESSAGEID IN (SELECT DETAILMESSAGEID FROM PRJ_MESSAGEBODYDEFINITION WHERE RULENAME = #{ruleId} AND PROJECTID = #{projectId}) -->
    AND PROJECTID = #{projectId}
    ORDER BY CAST(POSITION AS INTEGER)
  </select>

  <select id="getDBClassList" parameterType="HashMap" resultType="HashMap">
     SELECT /** ruleModeling.getDBClassList */ * 
      FROM RULE_VARIABLEDECLARE B
      WHERE PROJECTID = #{projectId}
      AND RULEID = #{ruleId}
      <!-- AND RULEID IN (#{ruleId},'ALL') -->
      <!-- AND CATEGORY = 'DBCLASS' -->
      ORDER BY VARIABLENAME
  </select>
    <!-- 추가(2021.08.09, devYH) : 해당 프로젝트의 Class List 조회 -->
    <select id="selectClassGroups" parameterType="ClassDefinition" resultType="ClassDefinition">
        SELECT PROJECTID, TABLEGROUP
        FROM PRJ_TABLEDEFINITION
        GROUP BY TABLEGROUP, PROJECTID
        HAVING PROJECTID = #{projectId}
        ORDER BY TABLEGROUP
    </select>
    <select id="selectClassList" parameterType="ClassDefinition" resultType="ClassDefinition">
       SELECT PROJECTID, TABLEGROUP ,TABLEID
        FROM PRJ_TABLEDEFINITION
        WHERE PROJECTID = #{projectId}
        AND TABLEGROUP = #{tableGroup}
        ORDER BY TABLEID
    </select>
  <select id="selectClassAttrDefList" parameterType="ClassAttributeDefinition" resultType="ClassAttributeDefinition">
     SELECT /** DBClass.selectClassAttrDefList */ 
        PROJECTID
        ,TABLEID
        ,COLUMNID
        ,POSITION
        ,DESCRIPTION
        ,AVAILABILITY
        ,COLUMNTYPE
        ,DATATYPE
        ,DATASIZE
        ,ISPRIMARY
        ,ISNOTNULL
        ,DEFAULTVALUE
        ,`CONSTRAINT`
        ,FOREIGNKEY
        ,COMMENTS
        ,EXAMPLE
        ,RELEVANTTYPE
        ,RELEVANTCOLUMNID
        ,UPDATEDATE
        ,UPDATEUSER
        ,COLUMNCHGDATE
        ,COLUMNCHGUSER
        ,REFERENCETABLE
        ,TOCOLUMNID
      FROM PRJ_COLUMNDEFINITION
      WHERE 1=1
      AND PROJECTID = #{projectId}
      <if test='tableId != null and tableId != ""' > 
        AND TABLEID = #{tableId}
      </if>
      <if test='columnId != null and columnId != ""' >
        AND COLUMNID = #{columnId}
      </if>
      <if test='classIds != null and classIds != ""'>
            AND TABLEID IN 
        <foreach item="class" collection="classIds" open="(" separator="," close=")">#{class}</foreach>
      </if>
      <if test='orderYn != null and orderYn != ""' >
          ORDER BY TABLEID, CAST(POSITION AS Integer)
      </if>
  </select>

  <select id="getVariableInUseData"  parameterType="BizLogicLine" resultType="HashMap">
    SELECT COUNT(*) AS CNT
    FROM RULE_VARIABLEINUSE 
    WHERE PROJECTID = #{projectId}
    AND RULEID = #{ruleId} 
    AND VARIABLENAME = #{variableName} 
  </select>
  
  <select id="getVariableInUseName"  parameterType="BizLogicLine" resultType="HashMap">
    SELECT *
    FROM RULE_VARIABLEINUSE 
    WHERE PROJECTID = #{projectId}
      AND RULEID = #{ruleId} 
      AND VERSION = #{version}
      <!-- AND ITEMID = #{itemId}   -->
      <if test="itemId != null and itemId != '' ">
      AND ITEMID IN (  SELECT ITEMID FROM RULE_BIZLOGICITEM WHERE SUPERITEMID IN 	
        ( SELECT ITEMID FROM RULE_BIZLOGICITEM WHERE PROJECTID =  #{projectId}
            AND RULEID = #{ruleId}
            AND VERSION = #{version}
            AND BLOCKID = #{blockId}
            AND (ITEMID =  #{itemId}
            OR SUPERITEMID IN (SELECT ITEMID FROM RULE_BIZLOGICITEM WHERE PROJECTID =  #{projectId}
            AND RULEID = #{ruleId}
            AND VERSION = #{version}
            AND BLOCKID = #{blockId}
            AND (ITEMID =  #{itemId}OR SUPERITEMID =  #{itemId}))
            )
          )
          OR ITEMID IN (				SELECT ITEMID FROM RULE_BIZLOGICITEM WHERE PROJECTID =  #{projectId}
            AND RULEID = #{ruleId}
            AND VERSION = #{version}
            AND BLOCKID = #{blockId}
            AND (ITEMID =  #{itemId}
            OR SUPERITEMID IN (SELECT ITEMID FROM RULE_BIZLOGICITEM WHERE PROJECTID =  #{projectId}
            AND RULEID = #{ruleId}
            AND VERSION = #{version}
            AND BLOCKID = #{blockId}
            AND (ITEMID =  #{itemId}OR SUPERITEMID =  #{itemId}))
            )
          )
      )
      </if>
      <if test="variableName != null and variableName != '' ">
        AND VARIABLENAME = #{variableName}      
      </if>
  </select>

  <select id="getBizLogicItem2" parameterType="BizLogicItem" resultType="java.util.LinkedHashMap">
   SELECT  A.*     
     FROM (SELECT 
      PROJECTID
        ,RULEID
        ,VERSION
        ,BLOCKID
        ,ITEMID
        ,LEVEL
        ,SUPERITEMID
        ,SEQNUM
        ,INDENTATION
        ,ITEMNAME
        ,ITEMTYPE
        ,CATEGORY
        ,ISMODIFIABLE
        <!-- ,TABLENAME -->
         ,CASE WHEN ITEMNAME LIKE '%IF%' 
        	THEN ( 	SELECT DESCRIPTION2 FROM RULE_BIZLOGICITEM rb 
		        	WHERE rb.ITEMID = A.ITEMID
		        	AND rb.PROJECTID  = #{projectId}
		        	AND rb.RULEID = #{ruleId}     
		        	AND rb.VERSION =  #{version})
              	<!-- WHEN ITEMNAME LIKE 'ELSE%' -->
				<!-- THEN ( SELECT DESCRIPTION2  FROM RULE_BIZLOGICITEM rb 
                WHERE rb.ITEMID = A.ITEMID
                AND rb.PROJECTID  = #{projectId}
                    AND rb.RULEID = #{ruleId}     
                    AND rb.VERSION =  #{version}) -->
        	ELSE TABLENAME 
        	END AS TABLENAME
        ,PSEUDOCODE3
        ,ICONNAME
        ,ICONTEXT3
        ,ICONIMAGE
        ,DESCRIPTION3
        ,PSEUDOCODE1
        ,PSEUDOCODE2
        ,ICONTEXT1
        ,ICONTEXT2
        ,DESCRIPTION1
        ,DESCRIPTION2
        ,CASE WHEN SUPERITEMID IN ('Top','None') 
      	THEN SUBSTRING_INDEX(ITEMID,'-',-1) 
      	ELSE (CAST(CASE WHEN SUBSTRING_INDEX(SUPERITEMID,'-',-1) IN ('Top','None') THEN SUBSTRING_INDEX(ITEMID,'-',-1) 
      				   ELSE SUBSTRING_INDEX(SUPERITEMID,'-',-1) 
      				   END AS INTEGER
			      ) +SEQNUM )
        END 
      AS SORT
     FROM RULE_BIZLOGICITEM A
    WHERE A.PROJECTID  = #{projectId}
      AND A.RULEID = #{ruleId}
      AND A.VERSION =  #{version})
     A
    <!-- order by SORT -->
    
    order by LEVEL,CAST(SEQNUM AS INTEGER) ASC

  </select>

  <select id="getBizLogicItem" parameterType="BizLogicItem" resultType="java.util.LinkedHashMap">
    WITH RECURSIVE MENU_MGR AS  
      (
      SELECT  
      A.PROJECTID 
      ,A.RULEID 
      ,A.VERSION 
      ,A.BLOCKID 
      ,A.SUPERITEMID
      ,A.ITEMID
      ,A.ITEMNAME
      ,A.SEQNUM 
      ,A.LEVEL 
      ,A.TABLENAME
      ,A.ITEMNAME AS ITEMNAME2
      ,A.ICONIMAGE 
      ,A.PSEUDOCODE1
      ,A.ITEMID AS ID
      ,A.ITEMTYPE
      FROM RULE_BIZLOGICITEM A
      WHERE  1=1
      <if test=" itemId == null or itemId == '' ">
       AND SUPERITEMID in('Top' ,'None')
      </if>
      <if test=" itemId != null and itemId != '' ">
       AND A.ITEMID = #{itemId}
      </if>
      UNION ALL
      SELECT
      B.PROJECTID 
      ,B.RULEID 
      ,B.VERSION 
      ,B.BLOCKID 
      ,B.SUPERITEMID
      ,B.ITEMID
      ,B.ITEMNAME
      ,B.SEQNUM 
      ,B.LEVEL 
      ,B.TABLENAME
      ,MM.ITEMNAME AS ITEMNAME2
       ,B.ICONIMAGE 
       ,B.PSEUDOCODE1
       ,MM.ID AS ID
       ,B.ITEMTYPE
      FROM RULE_BIZLOGICITEM B
      INNER JOIN MENU_MGR MM
      ON B.SUPERITEMID = MM.ITEMID
      )
      SELECT 
      A.PROJECTID 
      ,A.RULEID 
      ,A.VERSION 
      ,A.BLOCKID 
      ,A.SUPERITEMID
      ,A.ITEMID
      ,A.ITEMNAME
      ,A.SEQNUM 
      ,A.LEVEL 
      ,A.TABLENAME
      ,C.MAXLEVEL
      ,CASE WHEN A.LEVEL >= 2 THEN  A.SUPERITEMID ELSE A.ITEMID END ITEM_TOP
      ,A.ICONIMAGE 
      ,A.PSEUDOCODE1
      ,A.ID
      ,A.ITEMTYPE
      FROM MENU_MGR A 
      ,(SELECT MAX(LEVEL) as MAXLEVEL
        FROM RULE_BIZLOGICITEM B
         WHERE PROJECTID  = #{projectId}
        AND RULEID = #{ruleId}
        AND VERSION =  #{version}
      )C
      WHERE A.PROJECTID  = #{projectId}
      AND A.RULEID = #{ruleId}
      AND A.VERSION =  #{version}
      <if test=" itemId != null and itemId != '' ">
            AND A.ITEMTYPE LIKE CONCAT('%', (SELECT SUBSTRING_INDEX(ITEMTYPE,'-',1) FROM RULE_BIZLOGICITEM A WHERE A.PROJECTID  =  #{projectId}
            AND A.RULEID = #{ruleId}
            AND A.VERSION =   #{version}
            AND A.ITEMID = #{itemId}),'%')
      </if>
      <choose>
        <when test=" itemId != null and itemId != '' ">
          ORDER BY ITEM_TOP ,A.ITEMID
        </when>
        <otherwise>
         ORDER BY ITEM_TOP DESC,A.ITEMID
        </otherwise>
      </choose>
  </select>

  <delete id="executeLogicDelete" parameterType="BizLogicLine">
      DELETE FROM RULE_BASICLINE
      WHERE PROJECTID = #{projectId}
      AND RULEID = #{ruleId}
      AND VERSION = #{version}
      <!-- AND BLOCKID = #{blockId} -->
      AND ITEMID = #{blockItemId}
      AND VARIABLENAME = #{variableName}
  </delete>

  <select id="existClassSourceGenData" parameterType="MessageClass" resultType="int">
    SELECT COUNT(*) FROM CLASSSOURCEGEN
    WHERE 1=1 AND CLASSTYPE = #{classType} AND CLASSID = #{classId} AND CLASSGROUP =  #{classGroup}
  </select>

  <update id="updateClassSourceGenData" parameterType="com.become.atum.webportal.model.MessageClass">
    UPDATE CLASSSOURCEGEN
    SET DESCRIPTION = #{description}
      , CLASSSOURCEFILENAME = #{classSourceFileName}
      , CLASSLIBDLLNAME = #{classLibDllName}
      , CLASSSOURCEFILE = #{classSourceFileData, jdbcType=BLOB}
      , CLASSLIBDLL= #{classLibDllData, jdbcType=BLOB}
      , SOURCEGENDATE = NOW()
      , COMPILEDATE = NOW()
      , GENUSERID = #{genUserId}
      , COMPILEUSERID = #{compileUserId} 
    WHERE 1=1 AND PROJECTID = #{projectId} AND CLASSTYPE = #{classType} AND CLASSID = #{classId} AND CLASSGROUP =  #{classGroup}
  </update>


  <insert id="insertClassSourceGenData" parameterType="com.become.atum.webportal.model.MessageClass">
	  INSERT INTO CLASSSOURCEGEN
      (PROJECTID,CLASSTYPE, CLASSID, CLASSGROUP, DESCRIPTION, CLASSSOURCEFILENAME, CLASSLIBDLLNAME, 
      CLASSSOURCEFILE, CLASSLIBDLL, SOURCEGENDATE, COMPILEDATE, GENUSERID, COMPILEUSERID)
      VALUES
      (#{projectId},#{classType},#{classId} ,#{classGroup} ,#{description},#{classSourceFileName},#{classLibDllName}
      ,#{classSourceFileData, jdbcType=BLOB}, #{classLibDllData, jdbcType=BLOB},NOW(),NOW(),#{genUserId}, #{compileUserId} )
  </insert>

 <select id="getIfItemList" parameterType="BizLogicLine" resultType="BizLogicLine">
    WITH RECURSIVE MENU_MGR AS  
      (
      SELECT  
      A.PROJECTID 
      ,A.RULEID 
      ,A.VERSION 
      ,A.BLOCKID 
      ,A.SUPERITEMID
      ,A.ITEMID
      ,A.ITEMNAME
      ,A.SEQNUM 
      ,A.LEVEL 
      ,A.TABLENAME
      ,A.ITEMNAME AS ITEMNAME2
      ,A.ICONIMAGE 
      ,A.PSEUDOCODE1
      ,A.ITEMID AS ID
      ,A.ITEMTYPE
      FROM RULE_BIZLOGICITEM A
      WHERE  1=1
       AND A.ITEMID = #{itemId}
      UNION ALL
      SELECT
      B.PROJECTID 
      ,B.RULEID 
      ,B.VERSION 
      ,B.BLOCKID 
      ,B.SUPERITEMID
      ,B.ITEMID
      ,B.ITEMNAME
      ,B.SEQNUM 
      ,B.LEVEL 
      ,B.TABLENAME
      ,MM.ITEMNAME AS ITEMNAME2
       ,B.ICONIMAGE 
       ,B.PSEUDOCODE1
       ,MM.ID AS ID
       ,B.ITEMTYPE
      FROM RULE_BIZLOGICITEM B
      INNER JOIN MENU_MGR MM
      ON B.SUPERITEMID = MM.ITEMID
      )
      SELECT 
      A.PROJECTID 
      ,A.RULEID 
      ,A.VERSION 
      ,A.BLOCKID 
      ,A.SUPERITEMID
      ,A.ITEMID
      ,A.ITEMNAME
      ,A.SEQNUM 
      ,A.LEVEL 
      ,A.TABLENAME
      ,C.MAXLEVEL
      ,CASE WHEN A.LEVEL >= 2 THEN  A.SUPERITEMID ELSE A.ITEMID END ITEM_TOP
      ,A.ICONIMAGE 
      ,A.PSEUDOCODE1
      ,A.ID
      ,A.ITEMTYPE
      FROM MENU_MGR A 
      ,(SELECT MAX(LEVEL) as MAXLEVEL
        FROM RULE_BIZLOGICITEM B
         WHERE PROJECTID  = #{projectId}
        AND RULEID = #{ruleId}
        AND VERSION =  #{version}
      )C
      WHERE A.PROJECTID  = #{projectId}
      AND A.RULEID = #{ruleId}
      AND A.VERSION = #{version}
 </select>

 <delete id="deleteIfItem" parameterType="BizLogicLine">
    DELETE FROM RULE_BIZLOGICITEM
    <!-- WHERE 1=1     -->
    <where>
    <foreach item="item" index="index" collection="list" separator=" , ">
      <if test="index == 0">
        AND PROJECTID = #{item.projectId}  
        AND RULEID = #{item.ruleId}
        AND ITEMID IN (
      </if>
     #{item.itemId}
    </foreach>
    )
    </where>
  </delete>
 <delete id="deleteIfErrorcodeData" parameterType="BizLogicLine">
    DELETE FROM PRJ_ERRORCODEDEFINITION
    where 1=1 
    and ERRORCODE IN ( SELECT ERRORCODE FROM RULE_BIZLOGICLINE
    WHERE ITEMID IN( 
    <foreach item="item" index="index" collection="list" separator=" , ">
    <if test="item.itemId != null">
      #{item.itemId}
    </if>
    </foreach>
    ))
    
  </delete>
 <delete id="deleteIfLine" parameterType="BizLogicLine">
    DELETE FROM RULE_BIZLOGICLINE
    <!-- WHERE 1=1     -->
    <where>
    <foreach item="item" index="index" collection="list" separator=" , ">
      <if test="index == 0">
        AND PROJECTID = #{item.projectId}  
        AND RULEID = #{item.ruleId}
        AND ITEMID IN (
      </if>
     #{item.itemId}
    </foreach>
    )
    </where>
  </delete>


  <insert id="ruleSourceDefHisSave" parameterType="HashMap">
  INSERT INTO /* ruleSourceDefHisSave */ RULE_SOURCEDEFINITIONHISTORY
  ( PROJECTID
    ,RULEID
    ,VERSION
    ,MESSAGEID
    ,SERVICENAME
    ,DETAILMESSAGEID
    ,RULENAME
    ,STATUS
    ,GROUP1
    ,GROUP2
    ,GROUP3
    ,ICONNAME
    ,ICONTEXT
    ,ICONIMAGE
    ,ISCURVERSION
    ,DESCRIPTION
    <!-- ,ERRORCODEID -->
    ,BUILDLOCK
    ,CREATEDATE
    ,CREATEUSER
    ,UPDATEDATE
    ,UPDATEUSER
    ,ERRORCODELANGUAGE
    ,EVENTID
    ,EVENTTIMEKEY
    ,EVENTTIME
    ,EVENTUSER
    ,EVENTCOMMENT    
  )
    SELECT 
    PROJECTID
    ,RULEID
    ,VERSION
    ,MESSAGEID
    ,SERVICENAME
    ,DETAILMESSAGEID
    ,RULENAME
    ,STATUS
    ,GROUP1
    ,GROUP2
    ,GROUP3
    ,ICONNAME
    ,ICONTEXT
    ,ICONIMAGE
    ,ISCURVERSION
    ,DESCRIPTION
    <!-- ,ERRORCODEID -->
    ,BUILDLOCK
    ,CREATEDATE
    ,CREATEUSER
    ,UPDATEDATE
    ,UPDATEUSER
    ,ERRORCODELANGUAGE
    ,#{eventId} as EVENTID
    ,DATE_FORMAT(now(6) , '%y%m%d%H%i%s%f') as EVENTTIMEKEY
    ,DATE_FORMAT(sysdate(),'%Y-%m-%d %H:%i:%s') as EVENTTIME
    ,#{userId} as EVENTUSER
    ,#{eventComment} as EVENTCOMMENT
    FROM RULE_SOURCEDEFINITION
    WHERE PROJECTID = #{projectId}
    AND RULEID = #{ruleId}
    AND VERSION = #{version}
  </insert>

  <select id="reorderErrorCodeList" parameterType="BizLogicLine" resultType="HashMap">
    SELECT <![CDATA[ CONCAT(LEFT(ERRORCODE_LINE,8), LPAD(@rownum:=@rownum+10,3,'0')) AS UPDATEECODE, ]]> B.*
    FROM ( SELECT  L.PROJECTID ,L.RULEID, L.VERSION
    , L.BLOCKID ,L.SEQNUM AS LINE_SEQ,I.ITEMID ,I.LEVEL,I.SEQNUM AS ITEM_SEQ
    ,L.ERRORCODE AS ERRORCODE_LINE
    ,E.*
    FROM  RULE_BIZLOGICLINE L
    LEFT JOIN(   SELECT * FROM  RULE_BIZLOGICITEM C WHERE C.PROJECTID =#{projectId}) I ON I.ITEMID = L.ITEMID AND I.PROJECTID = L.PROJECTID AND I.VERSION = L.VERSION
    LEFT JOIN(   SELECT ERRORCODE,FUNCTIONID,SUBFUNCTIONID, ERRORLEVEL    ,MESSAGEID, VARIABLES, REPLACEMENTVALUES, DESCRIPTION , VARIABLENUMBER    FROM PRJ_ERRORCODEDEFINITION pe WHERE    PROJECTID =#{projectId}   ) E ON E.ERRORCODE = L.ERRORCODE
    WHERE L.PROJECTID =#{projectId}
    AND L.RULEID = #{ruleId}
    AND L.VERSION  = #{version}
    AND L.BLOCKID = #{blockId}
    AND L.ERRORCODE IS NOT NULL AND NOT L.ERRORCODE = ''
    AND (@rownum:=0)=0
    ORDER BY I.LEVEL,I.SEQNUM
    )B
   </select>

   <!-- <update id="reorderErrorCode" parameterType="BizLogicLine">
      <foreach item="item" index="index" collection="list" open="" close="" separator=";">
          UPDATE PRJ_ERRORCODEDEFINITION SET ERRORCODE = #{item.UPDATEECODE}
            WHERE PROJECTID = #{item.PROJECTID}
            AND FUNCTIONID = #{item.RULEID}
            AND ERRORCODE = #{item.ERRORCODE}
      </foreach>
    </update> -->


  
  
  <update id="reorderErrorCode" parameterType="BizLogicLine">    
    INSERT INTO PRJ_ERRORCODEDEFINITION
     (
       PROJECTID
        ,ERRORCODE
        ,FUNCTIONID
        ,SUBFUNCTIONID
        ,ERRORLEVEL
        ,MESSAGEID
        ,VARIABLES
        ,REPLACEMENTVALUES
        ,DESCRIPTION
        ,VARIABLENUMBER
    ) VALUES
      <foreach item="item" index="index" collection="list" separator=" , ">
      (   
         #{item.PROJECTID}
        ,#{item.UPDATEECODE}
        ,#{item.FUNCTIONID}
        ,#{item.SUBFUNCTIONID}
        ,#{item.ERRORLEVEL}
        ,#{item.MESSAGEID}
        ,#{item.VARIABLES}
        ,#{item.REPLACEMENTVALUES}
        ,#{item.DESCRIPTION}
        ,#{item.VARIABLENUMBER}
        )
    </foreach>
  </update>
  <update id="reorderBizLineErrorCode" parameterType="BizLogicLine">
      <foreach item="item" index="index" collection="list" open="" close="" separator=";">
          UPDATE RULE_BIZLOGICLINE
           SET ERRORCODE = #{item.UPDATEECODE},
         <![CDATA[  SOURCECODE = CONCAT(SUBSTRING_INDEX(SOURCECODE,'"',1) ,'"',RIGHT(ERRORCODE,3),'";') ]]>
            WHERE PROJECTID = #{item.PROJECTID}
            AND RULEID = #{item.RULEID}
            AND VERSION = #{item.VERSION}
            AND BLOCKID = #{item.BLOCKID}
            AND ITEMID = #{item.ITEMID}
            AND SEQNUM = #{item.LINE_SEQ}
      </foreach>
    </update>
    <delete id="deleteErrorCode" parameterType="BizLogicLine" >
      DELETE FROM PRJ_ERRORCODEDEFINITION
      WHERE 1=1 AND 
        <foreach item="item" index="index" collection="list" open="" close="" separator="OR">
        (PROJECTID = #{item.PROJECTID} 
        AND ERRORCODE = #{item.ERRORCODE} 
        AND FUNCTIONID = #{item.RULEID}
         AND ERRORLEVEL = #{item.ERRORLEVEL})
        </foreach>
    </delete>

    <select id="testDraw" resultType="HashMap">
     SELECT * FROM RULE_BIZLOGICITEM rb 
      WHERE PROJECTID = 'ATUM'
      AND RULEID = 'BR_TxnAlarm2'
      AND VERSION = '0.0.1'
      ORDER BY CAST(LEVEL AS INTEGER) , CAST(SEQNUM AS INTEGER) 
    </select>
    
    <select id="getRevisionData" resultType="HashMap">
     SELECT * FROM RULE_SOURCEDEFINITION 
      WHERE PROJECTID = #{projectId}
      AND RULEID = #{ruleId}
      AND VERSION = #{version}
    </select>

 <update id="setSourceDefRevisionFlag" parameterType="Item">
  UPDATE RULE_SOURCEDEFINITION
  SET REVISIONFLAG = 'Y'
  <!-- ,UPDATEDATE = DATE_FORMAT(now(6) , '%y-%m-%d %H:%i:%s')  -->
  <![CDATA[,UPDATEDATE = DATE_FORMAT(now(6) , '%y-%m-%d %H:%i:%s')]]>   
  WHERE PROJECTID =  #{projectId}
  AND RULEID = #{ruleId}
  AND VERSION = #{version}
 </update>
</mapper>



